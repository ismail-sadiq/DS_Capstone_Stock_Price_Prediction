# -*- coding: utf-8 -*-
"""Final Stock Price Prediction Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CS6K9UwJJNyYuDXFSBC79UfEjbK6piuC

# Stock Price Prediction Machine Learning - DSI Misk Skills

# Ismail Sadiq
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
import sklearn.metrics as metrics
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""# General Overview & Exploratory Data Analysis (EDA)

## Read The Data
"""

data = pd.read_csv("AAPL.csv")
print(data.head())

"""## How many rows and columns do we have?"""

df = pd.read_csv('AAPL.csv')
df.shape
df

"""## Is there any duplicated values?"""

df.duplicated().sum().any()

sum(df.duplicated())

"""## What is the columns type? and is  there  a missing values?"""

df.info()

def resumetable(df):
    print(f"Dataset Shape: {df.shape}")
    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])
    summary = summary.reset_index()
    summary['Name'] = summary['index']
    summary = summary[['Name','dtypes']]
    summary['Missing'] = df.isnull().sum().values    
    summary['Uniques'] = df.nunique().values
    return summary


resumetable(df)

"""## General Statistic Description for the Data"""

df.describe()

"""## Number of Null values per column"""

df.isna().sum()

"""## What is the relationship ?

### First let see the general correlation between all columns
"""

print(df.corr())

"""### This heatmap shows if there is any relationship between the variables (columns)"""

sns.heatmap(df.corr(), cmap=("Blues"))

plt.figure(figsize=(16,8))

# heatmap
sns.heatmap(df.corr(), cmap="Blues", annot=True)
plt.show()

"""##From my observation, I find that the data have a strong relationship between the variables columns without Volume. In this project I will focus on the date and close price column to predict the future price.

## The Correlation between Close and Volume
"""

plt.scatter(df['Close'], df['Volume'])
plt.ylabel("Close")
plt.xlabel("Volume")
plt.title("Correlation between Close and Volume")

"""## The Correlation between High and Low"""

plt.scatter(df['High'], df['Low'])
plt.ylabel("High")
plt.xlabel("Low")
plt.title("Correlation between High and Low")

"""## General overview of the relationships in the dataset"""

sns.pairplot(df)

"""## What is the histogram for the columns? do they have the same distribution? """

df['Open'].hist()

df['High'].hist()

df['Low'].hist()

df['Close'].hist()

df['Adj Close'].hist()

df['Volume'].hist()

df

"""#  Line graph overview of the data  """

import plotly.graph_objects as go
figure = go.Figure(data=[go.Candlestick(x=data["Date"],
                                        open=data["Open"], high=data["High"],
                                        low=data["Low"], close=data["Close"])])
figure.update_layout(title = "Apple Stock Price Analysis", xaxis_rangeslider_visible=False)
figure.show()

"""# Using Linear Regression To Predict AAPL (Apple stock) Prices"""

data = pd.read_csv("AAPL.csv")
print(data.head())

import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
df = pd.read_csv('AAPL.csv')

def prepare_data(df,forecast_col,forecast_out,test_size):
    label = df[forecast_col].shift(-forecast_out) #creating new column called label with the last 5 rows are nan
    X = np.array(df[[forecast_col]]) #creating the feature array
    X = preprocessing.scale(X) #processing the feature array
    X_lately = X[-forecast_out:] #creating the column i want to use later in the predicting method
    X = X[:-forecast_out] # X that will contain the training and testing
    label.dropna(inplace=True) #dropping na values
    y = np.array(label)  # assigning Y
    X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=test_size, random_state=0) #cross validation

    response = [X_train,X_test , Y_train, Y_test , X_lately]
    return response

forecast_col = 'Close'
forecast_out = 120
test_size = 0.2

X_train, X_test, Y_train, Y_test , X_lately =prepare_data(df,forecast_col,forecast_out,test_size); #calling the method were the cross validation and data preperation is in
learner = LinearRegression() #initializing linear regression model

learner.fit(X_train,Y_train) #training the linear regression model

score=learner.score(X_test,Y_test)#testing the linear regression model
forecast= learner.predict(X_lately) #set that will contain the forecasted data
response={}#creting json object
response['test_score']=score
response['forecast_set']=forecast

print(response)

"""### The Accuracy= 94%. As it can be seen, A score close to 100% indicates that the model explains the AAPL prices well

# Apple Stock Price Prediction with AutoTS Package
"""

pip install AutoTS

from autots import AutoTS
model = AutoTS(forecast_length=120, frequency='infer', ensemble='simple')
model = model.fit(df, date_col='Date', value_col='Close', id_col=None)
prediction = model.predict()
forecast = prediction.forecast
print(forecast)

"""# Stock Price Prediction with Facebook prophet model"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from fbprophet import Prophet

data = pd.read_csv("AAPL.csv")
data.head()

close = data['Close']
ax = close.plot(title='AAPL')
ax.set_xlabel('Date')
ax.set_ylabel('Close')
plt.show()

data["Date"] = pd.to_datetime(data["Date"], infer_datetime_format=True)
data = data[["Date", "Close"]]

data = data.rename(columns={"Date" : "ds", "Close" : "y" })

model = Prophet()
model.fit(data)
predict = model.make_future_dataframe(periods=365)
forcast = model.predict(predict)
forcast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail()

graph = model.plot(forcast, xlabel="Date", ylabel="Price")

"""# Conclusion

###By using 3 machine learning methods on Apple stock, our analysis shows that Apple stock is still a valuable investment for the future. However, Value investors need to conduct an external-internal business analysis to develop the full picture of the company's future value before the investment decision.
"""